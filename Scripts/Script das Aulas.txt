
Guia: Pratica 03 - Implementação da Fachada e Domínio
Padrão pra criar classes de domain

server.port = 8081

a) Atributos
b) Construtores vazio e com campos
c) Encapsulamento Get e Set
d) Colocar serial version
e) hashcode e equals

Guia: Pratica 04 - Configurar o Banco e acesso JPA

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>



http://localhost:8080/h2-console/

--======= Memória ===============---
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=admin
spring.datasource.password=
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


--=========== Arquivo ==================----
spring.h2.console.path=/h2-console
spring.datasource.url=jdbc:h2:file:~/test
spring.datasource.username=admin
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
--=============================----

Guia: Pratica 04 - Configurar o Banco e acesso JPA (Parte 2)
Criando Service e Repository e Popular dados

Pratica 05 - Camadas Service, Repository e Popula Dados

Pratica 06 - Relacionamento Muitos para Muitos


Pratica 07 - Tratando Exceções e Referências Cíclicas

@JsonIgnore
ServiceCategoria 
ObjetoNaoEncontradoException no pacote exceptions
ResourceExceptionHandler dentro de resources.exception
StandardError com status e msg.
http://localhost:8080/categorias/4

Pratica 08 - Relacionamento ManyToOne e OneToMany
	Criar classes Pet, Especie e Raca e seus respectivos 
		Repositories

Pratica 09 - Relacionamento entre Estado e Cidades

Pratica 10 - Criar Servico, Situacao e Tipos de Pagamento
	criar o relacionamento de Heranças de Pagamento

Pratica 11 - Pessoa, Cliente e Funcionario, Telefones e Endereços
	Criar relacionamentos e instâncias

		Cliente clt1 = new Cliente(null, "Jose Maria", "jose@mail.com", "335.194.320-21", "FISICA");
		clt1.getTelefones().addAll(Arrays.asList("3516-2000","9191-0000"));
		
		Funcionario fnc1 = new Funcionario(null, "Maria Jose", "maria@mail.com", "551.872.200.12", "FISICA");
		fnc1.getTelefones().addAll(Arrays.asList("3279-0001","9090-0002"));
		
		Endereco end1 = new Endereco(null, "Rua Tupis", "500", "Apto 101", "Pindorama", "30111222", clt1, c1);
		Endereco end2 = new Endereco(null, "Av. Tamoios", "100", "Casa", "Oca", "3968000", fnc1, c2);
		Endereco end3 = new Endereco(null, "Rua Aranãs", "10", "Apto 201", "Centro", "01153000", fnc1, c3);

Pratica 12 - disponibilizar Endpoint /pessoas/{id} 

Pratica 13 - Servico, SituacaoServico e Pagamento com Instâncias.

Pratica 14 - Ultimos relacionamentos, Pet, Servico e Produto.

Pratica 15 - disponibilizar Endpoint Servicos/{id} e corrigir
			 Referências Cíclicas

Pratica 16 - CRUD de Categoria (POST, PUT e DELETE) Parte 1 
			e 2 tratamento da exceção

Pratica 17 - POST, PUT e DELETE de Pessoa e Servico		

Pratica 18 - Listando Pessoas com DTO (Transfer Object)

Pratica 19 - Finalizar aplicação apontar para MySQL

	Resultado: Aplicação Backend Baseada em Rest de Petshop finalizada
	-> Endpoints: http://localhost:8080/categorias/{id}
				  http://localhost:8080/pessoas/{id}  e /pessoas
				  http://localhost:8080/servicos/{id}
	-> Aplicação funcional executando em Banco de dados local MySQL (MariaDB)		  
	-> Toda aplicação versionada via GitHub em: https://github.com/fabioled/petshop


	










